@file:Suppress("unused", "UNCHECKED_CAST", "SameParameterValue", "ObjectPropertyName")

import clojure.lang.*

fun correctSum(args: List<List<Int>>): List<Int> {
    if (args.isEmpty()) return listOf()
    val application = apply(partial(mapv, `+`) as IFn, args.toTypedArray()) as PersistentVector
    return asList(application.seq(), 0L).map { it.toInt() }
}

private fun <T> asList(solution: ISeq?, junk: T) = Iterable {
    object : Iterator<T> {
        var x: ISeq? = cons(junk, solution) as ISeq?
        override fun hasNext(): Boolean = x != null

        override fun next(): T {
            val ret = x!!.first()
            x = x!!.next()
            return ret as T
        }
    }
}.toList().drop(1)

private fun <R> ifnOf(func: () -> R): IFn = object : AFn() {
    override fun invoke(): Any? = func()
}

private fun <A, R> ifnOf(func: (A) -> R): IFn = object : AFn() {
    override fun invoke(arg1: Any?): Any? = func(arg1 as A)
}

private fun <A, B, R> ifnOf(func: (A, B) -> R): IFn = object : AFn() {
    override fun invoke(arg1: Any?, arg2: Any?): Any? = func(arg1 as A, arg2 as B)
}

private fun <A, B, C, R> ifnOf(func: (A, B, C) -> R): IFn = object : AFn() {
    override fun invoke(arg1: Any?, arg2: Any?, arg3: Any?): Any? = func(arg1 as A, arg2 as B, arg3 as C)
}

private inline fun <T, reified U> T.cast() = this as U
private val requirer = run {
    val req = RT.`var`(CLOJURE_CORE, "require")
    req.invoke(RT.readString(CLOJURE_STRING))
    req
}

private fun <T> resolve(name: String): T = resolve(CLOJURE_CORE, name)

@Suppress("UNCHECKED_CAST")
private fun <T> resolve(space: String, name: String): T = RT.`var`(space, name) as T

private const val CLOJURE_CORE = "clojure.core"
private const val CLOJURE_STRING = "clojure.string"

private val list = resolve<IFn>("list")
private val cons = resolve<IFn>("cons")
private val first = resolve<IFn>("first")
private val next = resolve<IFn>("next")
private val rest = resolve<IFn>("rest")
private val conj = resolve<IFn>("conj")
private val second = resolve<IFn>("second")
private val ffirst = resolve<IFn>("ffirst")
private val nfirst = resolve<IFn>("nfirst")
private val fnext = resolve<IFn>("fnext")
private val nnext = resolve<IFn>("nnext")
private val seq = resolve<IFn>("seq")
private val instance7 = resolve<IFn>("instance?")
private val seq7 = resolve<IFn>("seq?")
private val char7 = resolve<IFn>("char?")
private val string7 = resolve<IFn>("string?")
private val map7 = resolve<IFn>("map?")
private val vector7 = resolve<IFn>("vector?")
private val assoc = resolve<IFn>("assoc")
private val meta = resolve<IFn>("meta")
private val with_meta = resolve<IFn>("with-meta")
private val assert_valid_fdecl = resolve<IFn>("assert-valid-fdecl")
private val last = resolve<IFn>("last")
private val `butlast)` = resolve<IFn>("butlast)")
private val to_array = resolve<IFn>("to-array")
private val cast = resolve<IFn>("cast")
private val vector = resolve<IFn>("vector")
private val vec = resolve<IFn>("vec")
private val hash_map = resolve<IFn>("hash-map")
private val hash_set = resolve<IFn>("hash-set")
private val sorted_map = resolve<IFn>("sorted-map")
private val sorted_map_by = resolve<IFn>("sorted-map-by")
private val sorted_set = resolve<IFn>("sorted-set")
private val sorted_set_by = resolve<IFn>("sorted-set-by")
private val nil7 = resolve<IFn>("nil?")
private val false7 = resolve<IFn>("false?")
private val true7 = resolve<IFn>("true?")
private val boolean7 = resolve<IFn>("boolean?")
private val not = resolve<IFn>("not")
private val some7 = resolve<IFn>("some?")
private val any7 = resolve<IFn>("any?")
private val str = resolve<IFn>("str")
private val symbol7 = resolve<IFn>("symbol?")
private val keyword7 = resolve<IFn>("keyword?")
private val symbol = resolve<IFn>("symbol")
private val gensym = resolve<IFn>("gensym")
private val keyword = resolve<IFn>("keyword")
private val find_keyword = resolve<IFn>("find-keyword")
private val spread = resolve<IFn>("spread")
private val apply = resolve<IFn>("apply")
private val vary_meta = resolve<IFn>("vary-meta")
private val chunk_buffer = resolve<IFn>("chunk-buffer")
private val chunk_append = resolve<IFn>("chunk-append")
private val chunk = resolve<IFn>("chunk")
private val `chunk-first` = resolve<IFn>(" chunk-first")
private val chunk_rest = resolve<IFn>("chunk-rest")
private val `chunk-next` = resolve<IFn>(" chunk-next")
private val chunk_cons = resolve<IFn>("chunk-cons")
private val chunked_seq7 = resolve<IFn>("chunked-seq?")
private val concat = resolve<IFn>("concat")
private val delay7 = resolve<IFn>("delay?")
private val force = resolve<IFn>("force")
private val identical7 = resolve<IFn>("identical?")
private val `=` = resolve<IFn>("=")
private val `not=` = resolve<IFn>("not=")
private val compare = resolve<IFn>("compare")
private val zero7 = resolve<IFn>("zero?")
private val count = resolve<IFn>("count")
private val int = resolve<IFn>("int")
private val nth = resolve<IFn>("nth")
private val l = resolve<IFn>("<")
private val `inc'` = resolve<IFn>("inc'")
private val inc = resolve<IFn>("inc")
private val reduce1 = resolve<IFn>("reduce1")
private val reverse = resolve<IFn>("reverse")
private val nary_inline = resolve<IFn>("nary-inline")
private val g17 = resolve<IFn>(">1?")
private val g07 = resolve<IFn>(">0?")
private val `+'` = resolve<IFn>("+'")
private val `+` = resolve<IFn>("+")
private val `times'` = resolve<IFn>("*'")
private val times = resolve<IFn>("*")
private val div = resolve<IFn>("/")
private val `-'` = resolve<IFn>("-'")
private val `-` = resolve<IFn>("-")
private val leq = resolve<IFn>("<=")
private val gr = resolve<IFn>(">")
private val geq = resolve<IFn>(">=")
private val eqeq = resolve<IFn>("==")
private val max = resolve<IFn>("max")
private val min = resolve<IFn>("min")
private val abs = resolve<IFn>("abs")
private val `dec'` = resolve<IFn>("dec'")
private val dec = resolve<IFn>("dec")
private val unchecked_inc_int = resolve<IFn>("unchecked-inc-int")
private val unchecked_inc = resolve<IFn>("unchecked-inc")
private val unchecked_dec_int = resolve<IFn>("unchecked-dec-int")
private val unchecked_dec = resolve<IFn>("unchecked-dec")
private val unchecked_negate_int = resolve<IFn>("unchecked-negate-int")
private val unchecked_negate = resolve<IFn>("unchecked-negate")
private val unchecked_add_int = resolve<IFn>("unchecked-add-int")
private val unchecked_add = resolve<IFn>("unchecked-add")
private val unchecked_subtract_int = resolve<IFn>("unchecked-subtract-int")
private val unchecked_subtract = resolve<IFn>("unchecked-subtract")
private val unchecked_multiply_int = resolve<IFn>("unchecked-multiply-int")
private val unchecked_multiply = resolve<IFn>("unchecked-multiply")
private val unchecked_divide_int = resolve<IFn>("unchecked-divide-int")
private val unchecked_remainder_int = resolve<IFn>("unchecked-remainder-int")
private val pos7 = resolve<IFn>("pos?")
private val neg7 = resolve<IFn>("neg?")
private val quot = resolve<IFn>("quot")
private val rem = resolve<IFn>("rem")
private val rationalize = resolve<IFn>("rationalize")
private val bit_not = resolve<IFn>("bit-not")
private val bit_and = resolve<IFn>("bit-and")
private val bit_or = resolve<IFn>("bit-or")
private val bit_xor = resolve<IFn>("bit-xor")
private val bit_and_not = resolve<IFn>("bit-and-not")
private val bit_clear = resolve<IFn>("bit-clear")
private val bit_set = resolve<IFn>("bit-set")
private val bit_flip = resolve<IFn>("bit-flip")
private val bit_test = resolve<IFn>("bit-test")
private val bit_shift_left = resolve<IFn>("bit-shift-left")
private val bit_shift_right = resolve<IFn>("bit-shift-right")
private val unsigned_bit_shift_right = resolve<IFn>("unsigned-bit-shift-right")
private val integer7 = resolve<IFn>("integer?")
private val even7 = resolve<IFn>("even?")
private val odd7 = resolve<IFn>("odd?")
private val int7 = resolve<IFn>("int?")
private val pos_int7 = resolve<IFn>("pos-int?")
private val neg_int7 = resolve<IFn>("neg-int?")
private val nat_int7 = resolve<IFn>("nat-int?")
private val double7 = resolve<IFn>("double?")
private val complement = resolve<IFn>("complement")
private val constantly = resolve<IFn>("constantly")
private val identity = resolve<IFn>("identity")
private val peek = resolve<IFn>("peek")
private val pop = resolve<IFn>("pop")
private val map_entry7 = resolve<IFn>("map-entry?")
private val contains7 = resolve<IFn>("contains?")
private val get = resolve<IFn>("get")
private val dissoc = resolve<IFn>("dissoc")
private val disj = resolve<IFn>("disj")
private val find = resolve<IFn>("find")
private val select_keys = resolve<IFn>("select-keys")
private val keys = resolve<IFn>("keys")
private val vals = resolve<IFn>("vals")
private val key = resolve<IFn>("key")
private val `val` = resolve<IFn>("val")
private val rseq = resolve<IFn>("rseq")
private val name = resolve<IFn>("name")
private val namespace = resolve<IFn>("namespace")
private val boolean = resolve<IFn>("boolean")
private val ident7 = resolve<IFn>("ident?")
private val simple_ident7 = resolve<IFn>("simple-ident?")
private val qualified_ident7 = resolve<IFn>("qualified-ident?")
private val simple_symbol7 = resolve<IFn>("simple-symbol?")
private val qualified_symbol7 = resolve<IFn>("qualified-symbol?")
private val simple_keyword7 = resolve<IFn>("simple-keyword?")
private val qualified_keyword7 = resolve<IFn>("qualified-keyword?")
private val check_valid_options = resolve<IFn>("check-valid-options")
private val remove_all_methods = resolve<IFn>("remove-all-methods")
private val remove_method = resolve<IFn>("remove-method")
private val prefer_method = resolve<IFn>("prefer-method")
private val methods = resolve<IFn>("methods")
private val get_method = resolve<IFn>("get-method")
private val prefers = resolve<IFn>("prefers")
private val push_thread_bindings = resolve<IFn>("push-thread-bindings")
private val pop_thread_bindings = resolve<IFn>("pop-thread-bindings")
private val get_thread_bindings = resolve<IFn>("get-thread-bindings")
private val find_var = resolve<IFn>("find-var")
private val binding_conveyor_fn = resolve<IFn>("binding-conveyor-fn")
private val setup_reference = resolve<IFn>("setup-reference")
private val agent = resolve<IFn>("agent")
private val send_via = resolve<IFn>("send-via")
private val send = resolve<IFn>("send")
private val send_off = resolve<IFn>("send-off")
private val release_pending_sends = resolve<IFn>("release-pending-sends")
private val add_watch = resolve<IFn>("add-watch")
private val remove_watch = resolve<IFn>("remove-watch")
private val agent_error = resolve<IFn>("agent-error")
private val restart_agent = resolve<IFn>("restart-agent")
private val error_handler = resolve<IFn>("error-handler")
private val error_mode = resolve<IFn>("error-mode")
private val agent_errors = resolve<IFn>("agent-errors")
private val clear_agent_errors = resolve<IFn>("clear-agent-errors")
private val shutdown_agents = resolve<IFn>("shutdown-agents")
private val ref = resolve<IFn>("ref")
private val deref_future = resolve<IFn>("deref-future")
private val deref = resolve<IFn>("deref")
private val atom = resolve<IFn>("atom")
private val get_validator = resolve<IFn>("get-validator")
private val commute = resolve<IFn>("commute")
private val alter = resolve<IFn>("alter")
private val ref_set = resolve<IFn>("ref-set")
private val ref_history_count = resolve<IFn>("ref-history-count")
private val ref_min_history = resolve<IFn>("ref-min-history")
private val ref_max_history = resolve<IFn>("ref-max-history")
private val ensure = resolve<IFn>("ensure")
private val volatile7 = resolve<IFn>("volatile?")
private val comp = resolve<IFn>("comp")
private val juxt = resolve<IFn>("juxt")
private val partial = resolve<IFn>("partial")
private val sequence = resolve<IFn>("sequence")
private val every7 = resolve<IFn>("every?")
private val not_every7 = resolve<IFn>("not-every?")
private val some = resolve<IFn>("some")
private val not_any7 = resolve<IFn>("not-any?")
private val map = resolve<IFn>("map")
private val mapcat = resolve<IFn>("mapcat")
private val filter = resolve<IFn>("filter")
private val remove = resolve<IFn>("remove")
private val reduced = resolve<IFn>("reduced")
private val reduced7 = resolve<IFn>("reduced?")
private val ensure_reduced = resolve<IFn>("ensure-reduced")
private val unreduced = resolve<IFn>("unreduced")
private val take = resolve<IFn>("take")
private val take_while = resolve<IFn>("take-while")
private val drop = resolve<IFn>("drop")
private val drop_last = resolve<IFn>("drop-last")
private val take_last = resolve<IFn>("take-last")
private val drop_while = resolve<IFn>("drop-while")
private val cycle = resolve<IFn>("cycle")
private val split_at = resolve<IFn>("split-at")
private val split_with = resolve<IFn>("split-with")
private val repeat = resolve<IFn>("repeat")
private val replicate = resolve<IFn>("replicate")
private val iterate = resolve<IFn>("iterate")
private val range = resolve<IFn>("range")
private val merge = resolve<IFn>("merge")
private val merge_with = resolve<IFn>("merge-with")
private val line_seq = resolve<IFn>("line-seq")
private val comparator = resolve<IFn>("comparator")
private val sort = resolve<IFn>("sort")
private val sort_by = resolve<IFn>("sort-by")
private val dorun = resolve<IFn>("dorun")
private val doall = resolve<IFn>("doall")
private val nthnext = resolve<IFn>("nthnext")
private val nthrest = resolve<IFn>("nthrest")
private val partition = resolve<IFn>("partition")
private val eval = resolve<IFn>("eval")
private val await = resolve<IFn>("await")
private val `await1 a` = resolve<IFn>("await1 a")
private val await_for = resolve<IFn>("await-for")
private val transient = resolve<IFn>("transient")
private val persistent1 = resolve<IFn>("persistent!")
private val conj1 = resolve<IFn>("conj!")
private val assoc1 = resolve<IFn>("assoc!")
private val dissoc1 = resolve<IFn>("dissoc!")
private val pop1 = resolve<IFn>("pop!")
private val disj1 = resolve<IFn>("disj!")
private val into1 = resolve<IFn>("into1")
private val into_array = resolve<IFn>("into-array")
private val array = resolve<IFn>("array")
private val `class` = resolve<IFn>("class")
private val type = resolve<IFn>("type")
private val num = resolve<IFn>("num")
private val long = resolve<IFn>("long")
private val float = resolve<IFn>("float")
private val double = resolve<IFn>("double")
private val short = resolve<IFn>("short")
private val byte = resolve<IFn>("byte")
private val char = resolve<IFn>("char")
private val unchecked_byte = resolve<IFn>("unchecked-byte")
private val unchecked_short = resolve<IFn>("unchecked-short")
private val unchecked_char = resolve<IFn>("unchecked-char")
private val unchecked_int = resolve<IFn>("unchecked-int")
private val unchecked_long = resolve<IFn>("unchecked-long")
private val unchecked_float = resolve<IFn>("unchecked-float")
private val unchecked_double = resolve<IFn>("unchecked-double")
private val number7 = resolve<IFn>("number?")
private val mod = resolve<IFn>("mod")
private val ratio7 = resolve<IFn>("ratio?")
private val numerator = resolve<IFn>("numerator")
private val denominator = resolve<IFn>("denominator")
private val decimal7 = resolve<IFn>("decimal?")
private val float7 = resolve<IFn>("float?")
private val rational7 = resolve<IFn>("rational?")
private val bigint = resolve<IFn>("bigint")
private val biginteger = resolve<IFn>("biginteger")
private val bigdec = resolve<IFn>("bigdec")
private val pr_on = resolve<IFn>("pr-on")
private val pr = resolve<IFn>("pr")
private val newline = resolve<IFn>("newline")
private val flush = resolve<IFn>("flush")
private val prn = resolve<IFn>("prn")
private val print = resolve<IFn>("print")
private val println = resolve<IFn>("println")
private val read = resolve<IFn>("read")
private val `read+string` = resolve<IFn>("read+string")
private val read_line = resolve<IFn>("read-line")
private val read_string = resolve<IFn>("read-string")
private val subvec = resolve<IFn>("subvec")
private val alength = resolve<IFn>("alength")
private val aclone = resolve<IFn>("aclone")
private val aget = resolve<IFn>("aget")
private val aset = resolve<IFn>("aset")
private val make_array = resolve<IFn>("make-array")
private val to_array_2d = resolve<IFn>("to-array-2d")
private val macroexpand_1 = resolve<IFn>("macroexpand-1")
private val macroexpand = resolve<IFn>("macroexpand")
private val create_struct = resolve<IFn>("create-struct")
private val struct_map = resolve<IFn>("struct-map")
private val struct = resolve<IFn>("struct")
private val accessor = resolve<IFn>("accessor")
private val load_reader = resolve<IFn>("load-reader")
private val load_string = resolve<IFn>("load-string")
private val set7 = resolve<IFn>("set?")
private val set = resolve<IFn>("set")
private val filter_key = resolve<IFn>("filter-key")
private val find_ns = resolve<IFn>("find-ns")
private val create_ns = resolve<IFn>("create-ns")
private val remove_ns = resolve<IFn>("remove-ns")
private val all_ns = resolve<IFn>("all-ns")
private val the_ns = resolve<IFn>("the-ns")
private val ns_name = resolve<IFn>("ns-name")
private val ns_map = resolve<IFn>("ns-map")
private val ns_unmap = resolve<IFn>("ns-unmap")
private val ns_publics = resolve<IFn>("ns-publics")
private val ns_imports = resolve<IFn>("ns-imports")
private val ns_interns = resolve<IFn>("ns-interns")
private val refer = resolve<IFn>("refer")
private val ns_refers = resolve<IFn>("ns-refers")
private val alias = resolve<IFn>("alias")
private val ns_aliases = resolve<IFn>("ns-aliases")
private val ns_unalias = resolve<IFn>("ns-unalias")
private val take_nth = resolve<IFn>("take-nth")
private val interleave = resolve<IFn>("interleave")
private val var_get = resolve<IFn>("var-get")
private val var_set = resolve<IFn>("var-set")
private val ns_resolve = resolve<IFn>("ns-resolve")
private val resolve = resolve<IFn>("resolve")
private val array_map = resolve<IFn>("array-map")
private val seq_to_map_for_destructuring = resolve<IFn>("seq-to-map-for-destructuring")
private val destructure = resolve<IFn>("destructure")
private val maybe_destructured = resolve<IFn>("maybe-destructured")
private val pr_str = resolve<IFn>("pr-str")
private val prn_str = resolve<IFn>("prn-str")
private val print_str = resolve<IFn>("print-str")
private val println_str = resolve<IFn>("println-str")
private val elide_top_frames = resolve<IFn>("elide-top-frames")
private val ex_info = resolve<IFn>("ex-info")
private val ex_data = resolve<IFn>("ex-data")
private val ex_message = resolve<IFn>("ex-message")
private val ex_cause = resolve<IFn>("ex-cause")
private val test = resolve<IFn>("test")
private val re_pattern = resolve<IFn>("re-pattern")
private val re_matcher = resolve<IFn>("re-matcher")
private val re_groups = resolve<IFn>("re-groups")
private val re_seq = resolve<IFn>("re-seq")
private val re_matches = resolve<IFn>("re-matches")
private val re_find = resolve<IFn>("re-find")
private val rand = resolve<IFn>("rand")
private val rand_int = resolve<IFn>("rand-int")
private val tree_seq = resolve<IFn>("tree-seq")
private val file_seq = resolve<IFn>("file-seq")
private val xml_seq = resolve<IFn>("xml-seq")
private val special_symbol7 = resolve<IFn>("special-symbol?")
private val var7 = resolve<IFn>("var?")
private val subs = resolve<IFn>("subs")
private val max_key = resolve<IFn>("max-key")
private val min_key = resolve<IFn>("min-key")
private val distinct = resolve<IFn>("distinct")
private val replace = resolve<IFn>("replace")
private val mk_bound_fn = resolve<IFn>("mk-bound-fn")
private val subseq = resolve<IFn>("subseq")
private val rsubseq = resolve<IFn>("rsubseq")
private val repeatedly = resolve<IFn>("repeatedly")
private val add_classpath = resolve<IFn>("add-classpath")
private val hash = resolve<IFn>("hash")
private val mix_collection_hash = resolve<IFn>("mix-collection-hash")
private val hash_ordered_coll = resolve<IFn>("hash-ordered-coll")
private val hash_unordered_coll = resolve<IFn>("hash-unordered-coll")
private val interpose = resolve<IFn>("interpose")
private val empty = resolve<IFn>("empty")
private val float_array = resolve<IFn>("float-array")
private val boolean_array = resolve<IFn>("boolean-array")
private val byte_array = resolve<IFn>("byte-array")
private val char_array = resolve<IFn>("char-array")
private val short_array = resolve<IFn>("short-array")
private val double_array = resolve<IFn>("double-array")
private val object_array = resolve<IFn>("object-array")
private val int_array = resolve<IFn>("int-array")
private val long_array = resolve<IFn>("long-array")
private val bytes7 = resolve<IFn>("bytes?")
private val seque = resolve<IFn>("seque")
private val class7 = resolve<IFn>("class?")
private val alter_var_root = resolve<IFn>("alter-var-root")
private val bound7 = resolve<IFn>("bound?")
private val thread_bound7 = resolve<IFn>("thread-bound?")
private val make_hierarchy = resolve<IFn>("make-hierarchy")
private val not_empty = resolve<IFn>("not-empty")
private val bases = resolve<IFn>("bases")
private val supers = resolve<IFn>("supers")
private val isa7 = resolve<IFn>("isa?")
private val parents = resolve<IFn>("parents")
private val ancestors = resolve<IFn>("ancestors")
private val descendants = resolve<IFn>("descendants")
private val derive = resolve<IFn>("derive")
private val underive = resolve<IFn>("underive")
private val distinct7 = resolve<IFn>("distinct?")
private val resultset_seq = resolve<IFn>("resultset-seq")
private val iterator_seq = resolve<IFn>("iterator-seq")
private val enumeration_seq = resolve<IFn>("enumeration-seq")
private val format = resolve<IFn>("format")
private val printf = resolve<IFn>("printf")
private val require = resolve<IFn>("require")
private val requiring_resolve = resolve<IFn>("requiring-resolve")
private val use = resolve<IFn>("use")
private val loaded_libs = resolve<IFn>("loaded-libs")
private val load = resolve<IFn>("load")
private val compile = resolve<IFn>("compile")
private val get_in = resolve<IFn>("get-in")
private val assoc_in = resolve<IFn>("assoc-in")
private val update_in = resolve<IFn>("update-in")
private val update = resolve<IFn>("update")
private val coll7 = resolve<IFn>("coll?")
private val list7 = resolve<IFn>("list?")
private val seqable7 = resolve<IFn>("seqable?")
private val ifn7 = resolve<IFn>("ifn?")
private val fn7 = resolve<IFn>("fn?")
private val associative7 = resolve<IFn>("associative?")
private val sequential7 = resolve<IFn>("sequential?")
private val sorted7 = resolve<IFn>("sorted?")
private val counted7 = resolve<IFn>("counted?")
private val empty7 = resolve<IFn>("empty?")
private val reversible7 = resolve<IFn>("reversible?")
private val indexed7 = resolve<IFn>("indexed?")
private val trampoline = resolve<IFn>("trampoline")
private val intern = resolve<IFn>("intern")
private val memoize = resolve<IFn>("memoize")
private val future7 = resolve<IFn>("future?")
private val future_done7 = resolve<IFn>("future-done?")
private val fnil = resolve<IFn>("fnil")
private val zipmap = resolve<IFn>("zipmap")
private val inst_ms = resolve<IFn>("inst-ms")
private val inst7 = resolve<IFn>("inst?")
private val uuid7 = resolve<IFn>("uuid?")
private val random_uuid = resolve<IFn>("random-uuid")
private val reduce = resolve<IFn>("reduce")
private val reduce_kv = resolve<IFn>("reduce-kv")
private val completing = resolve<IFn>("completing")
private val transduce = resolve<IFn>("transduce")
private val into = resolve<IFn>("into")
private val mapv = resolve<IFn>("mapv")
private val filterv = resolve<IFn>("filterv")
private val slurp = resolve<IFn>("slurp")
private val spit = resolve<IFn>("spit")
private val future_call = resolve<IFn>("future-call")
private val future_cancel = resolve<IFn>("future-cancel")
private val future_cancelled7 = resolve<IFn>("future-cancelled?")
private val pmap = resolve<IFn>("pmap")
private val pcalls = resolve<IFn>("pcalls")
private val clojure_version = resolve<IFn>("clojure-version")
private val promise = resolve<IFn>("promise")
private val deliver = resolve<IFn>("deliver")
private val flatten = resolve<IFn>("flatten")
private val group_by = resolve<IFn>("group-by")
private val partition_by = resolve<IFn>("partition-by")
private val frequencies = resolve<IFn>("frequencies")
private val reductions = resolve<IFn>("reductions")
private val rand_nth = resolve<IFn>("rand-nth")
private val partition_all = resolve<IFn>("partition-all")
private val splitv_at = resolve<IFn>("splitv-at")
private val partitionv = resolve<IFn>("partitionv")
private val partitionv_all = resolve<IFn>("partitionv-all")
private val shuffle = resolve<IFn>("shuffle")
private val map_indexed = resolve<IFn>("map-indexed")
private val keep = resolve<IFn>("keep")
private val keep_indexed = resolve<IFn>("keep-indexed")
private val bounded_count = resolve<IFn>("bounded-count")
private val every_pred = resolve<IFn>("every-pred")
private val some_fn = resolve<IFn>("some-fn")
private val with_redefs_fn = resolve<IFn>("with-redefs-fn")
private val realized7 = resolve<IFn>("realized?")
private val preserving_reduced = resolve<IFn>("preserving-reduced")
private val cat = resolve<IFn>("cat")
private val halt_when = resolve<IFn>("halt-when")
private val dedupe = resolve<IFn>("dedupe")
private val random_sample = resolve<IFn>("random-sample")
private val eduction = resolve<IFn>("eduction")
private val iteration = resolve<IFn>("iteration")
private val tagged_literal7 = resolve<IFn>("tagged-literal?")
private val tagged_literal = resolve<IFn>("tagged-literal")
private val reader_conditional7 = resolve<IFn>("reader-conditional?")
private val reader_conditional = resolve<IFn>("reader-conditional")
private val uri7 = resolve<IFn>("uri?")
private val add_tap = resolve<IFn>("add-tap")
private val remove_tap = resolve<IFn>("remove-tap")
private val update_vals = resolve<IFn>("update-vals")
private val update_keys = resolve<IFn>("update-keys")
private val parse_long = resolve<IFn>("parse-long")
private val parse_double = resolve<IFn>("parse-double")
private val parse_boolean = resolve<IFn>("parse-boolean")
private val NaN7 = resolve<IFn>("NaN?")
private val infinite7 = resolve<IFn>("infinite?")

